syntax = "proto3";

option go_package = "wireless_lab_1/grpc/services";

package services;

message HeartbeatRequest{
    string node_id = 1;
}

message HeartbeatResponse {
}

message clientToMasterUploadRequest{
}

message clientToMasterUploadResponse{
    string ip_address = 1;
    string port = 2;
}

message clientToDataKeeperUploadRequest{
    string fileName = 1;
    bytes file_content = 2;
}

message clientToDataKeeperUploadResponse{
    bool success = 1;
    
}

message DataNodeNotificationRequest {
    string fileName = 1;
    string node_id = 2;
    string port_number = 3;
}

message DataNodeNotificationResponse {
    
}

message MasterToClientSuccessNotifyRequest{

}

message MasterToClientSuccessNotifyResponse{
    
}

message MasterToDataKeeperReplicaRequest{
    string ip_address = 1;
    string port = 2;
    string file_name = 3;
}

message MasterToDataKeeperReplicaResponse{
    bool success = 1;
}

message NodeToNodeReplicaRequest{
    string file_name = 1;
}

message NodeToNodeReplicaResponse{
    bytes file_content = 1;
    bool success = 2;
}

message RegisterRequest {
    string ip_address = 1;
}

message RegisterResponse {
    string node_id = 1;
    repeated string port_numbers = 2;
}

message DownloadRequest {
    string file_name = 1;
}

message DownloadResponse {
    repeated Machine machine_list = 1;

    message Machine {
        string ip_address = 1;
        string port = 2;
    }
}

service Services {
    rpc TrackHeartbeat (stream HeartbeatRequest) returns (stream HeartbeatResponse) {}
    rpc clientToMasterUpload(clientToMasterUploadRequest) returns (clientToMasterUploadResponse);
    rpc clientToDataKeeperUpload(clientToDataKeeperUploadRequest) returns (clientToDataKeeperUploadResponse);
    rpc dataNodeNotifyMaster(DataNodeNotificationRequest) returns (DataNodeNotificationResponse);
    rpc MasterToClientSuccessNotify(MasterToClientSuccessNotifyRequest) returns (MasterToClientSuccessNotifyResponse);
    rpc DownloadFile (DownloadRequest) returns (DownloadResponse);
    rpc MasterToDataKeeperReplica (MasterToDataKeeperReplicaRequest) returns (MasterToDataKeeperReplicaResponse);
    rpc NodeToNodeReplica (NodeToNodeReplicaRequest) returns (NodeToNodeReplicaResponse);
    rpc Register (RegisterRequest) returns (RegisterResponse);
}




