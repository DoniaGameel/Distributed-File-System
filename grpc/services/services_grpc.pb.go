// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: services.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Services_TrackHeartbeat_FullMethodName           = "/services.Services/TrackHeartbeat"
	Services_Hello_FullMethodName                    = "/services.Services/Hello"
	Services_ClientToMasterUpload_FullMethodName     = "/services.Services/clientToMasterUpload"
	Services_ClientToDataKeeperUpload_FullMethodName = "/services.Services/clientToDataKeeperUpload"
)

// ServicesClient is the client API for Services service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesClient interface {
	TrackHeartbeat(ctx context.Context, opts ...grpc.CallOption) (Services_TrackHeartbeatClient, error)
	Hello(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextResponse, error)
	ClientToMasterUpload(ctx context.Context, in *ClientToMasterUploadRequest, opts ...grpc.CallOption) (*ClientToMasterUploadResponse, error)
	ClientToDataKeeperUpload(ctx context.Context, in *ClientToDataKeeperUploadRequest, opts ...grpc.CallOption) (*ClientToDataKeeperUploadResponse, error)
}

type servicesClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesClient(cc grpc.ClientConnInterface) ServicesClient {
	return &servicesClient{cc}
}

func (c *servicesClient) TrackHeartbeat(ctx context.Context, opts ...grpc.CallOption) (Services_TrackHeartbeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Services_ServiceDesc.Streams[0], Services_TrackHeartbeat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &servicesTrackHeartbeatClient{stream}
	return x, nil
}

type Services_TrackHeartbeatClient interface {
	Send(*HeartbeatRequest) error
	Recv() (*HeartbeatResponse, error)
	grpc.ClientStream
}

type servicesTrackHeartbeatClient struct {
	grpc.ClientStream
}

func (x *servicesTrackHeartbeatClient) Send(m *HeartbeatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *servicesTrackHeartbeatClient) Recv() (*HeartbeatResponse, error) {
	m := new(HeartbeatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *servicesClient) Hello(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, Services_Hello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) ClientToMasterUpload(ctx context.Context, in *ClientToMasterUploadRequest, opts ...grpc.CallOption) (*ClientToMasterUploadResponse, error) {
	out := new(ClientToMasterUploadResponse)
	err := c.cc.Invoke(ctx, Services_ClientToMasterUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) ClientToDataKeeperUpload(ctx context.Context, in *ClientToDataKeeperUploadRequest, opts ...grpc.CallOption) (*ClientToDataKeeperUploadResponse, error) {
	out := new(ClientToDataKeeperUploadResponse)
	err := c.cc.Invoke(ctx, Services_ClientToDataKeeperUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesServer is the server API for Services service.
// All implementations must embed UnimplementedServicesServer
// for forward compatibility
type ServicesServer interface {
	TrackHeartbeat(Services_TrackHeartbeatServer) error
	Hello(context.Context, *TextRequest) (*TextResponse, error)
	ClientToMasterUpload(context.Context, *ClientToMasterUploadRequest) (*ClientToMasterUploadResponse, error)
	ClientToDataKeeperUpload(context.Context, *ClientToDataKeeperUploadRequest) (*ClientToDataKeeperUploadResponse, error)
	mustEmbedUnimplementedServicesServer()
}

// UnimplementedServicesServer must be embedded to have forward compatible implementations.
type UnimplementedServicesServer struct {
}

func (UnimplementedServicesServer) TrackHeartbeat(Services_TrackHeartbeatServer) error {
	return status.Errorf(codes.Unimplemented, "method TrackHeartbeat not implemented")
}
func (UnimplementedServicesServer) Hello(context.Context, *TextRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedServicesServer) ClientToMasterUpload(context.Context, *ClientToMasterUploadRequest) (*ClientToMasterUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientToMasterUpload not implemented")
}
func (UnimplementedServicesServer) ClientToDataKeeperUpload(context.Context, *ClientToDataKeeperUploadRequest) (*ClientToDataKeeperUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientToDataKeeperUpload not implemented")
}
func (UnimplementedServicesServer) mustEmbedUnimplementedServicesServer() {}

// UnsafeServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesServer will
// result in compilation errors.
type UnsafeServicesServer interface {
	mustEmbedUnimplementedServicesServer()
}

func RegisterServicesServer(s grpc.ServiceRegistrar, srv ServicesServer) {
	s.RegisterService(&Services_ServiceDesc, srv)
}

func _Services_TrackHeartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServicesServer).TrackHeartbeat(&servicesTrackHeartbeatServer{stream})
}

type Services_TrackHeartbeatServer interface {
	Send(*HeartbeatResponse) error
	Recv() (*HeartbeatRequest, error)
	grpc.ServerStream
}

type servicesTrackHeartbeatServer struct {
	grpc.ServerStream
}

func (x *servicesTrackHeartbeatServer) Send(m *HeartbeatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *servicesTrackHeartbeatServer) Recv() (*HeartbeatRequest, error) {
	m := new(HeartbeatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Services_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Services_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).Hello(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_ClientToMasterUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientToMasterUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).ClientToMasterUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Services_ClientToMasterUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).ClientToMasterUpload(ctx, req.(*ClientToMasterUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_ClientToDataKeeperUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientToDataKeeperUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).ClientToDataKeeperUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Services_ClientToDataKeeperUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).ClientToDataKeeperUpload(ctx, req.(*ClientToDataKeeperUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Services_ServiceDesc is the grpc.ServiceDesc for Services service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Services_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.Services",
	HandlerType: (*ServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Services_Hello_Handler,
		},
		{
			MethodName: "clientToMasterUpload",
			Handler:    _Services_ClientToMasterUpload_Handler,
		},
		{
			MethodName: "clientToDataKeeperUpload",
			Handler:    _Services_ClientToDataKeeperUpload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TrackHeartbeat",
			Handler:       _Services_TrackHeartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services.proto",
}
